AWSTemplateFormatVersion: '2010-09-09'

Description: Create a two-tier VPC in 3 AZ.

Parameters:

  VpcName:
    Type: String
    Description: Name of the VPC.
    Default: dev

  VpcCidr:
    Type: String
    Description: CIDR Format x.x.x.x/x
    Default: 10.0.0.0/16
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    MinLength: 9
    MaxLength: 18
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

  PublicSubnet1Cidr:
    Type: String
    Description: Public Subnet AZ 1
    Default: 10.0.0.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    MinLength: 9
    MaxLength: 18
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

  PublicSubnet2Cidr:
    Type: String
    Description: Public Subnet AZ 2
    Default: 10.0.1.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    MinLength: 9
    MaxLength: 18
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

  PublicSubnet3Cidr:
    Type: String
    Description: Public Subnet AZ 3
    Default: 10.0.2.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

  PrivateSubnet1Cidr:
    Type: String
    Description: Private Subnet AZ 1
    Default: 10.0.3.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    MinLength: 9
    MaxLength: 18
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

  PrivateSubnet2Cidr:
    Type: String
    Description: Private Subnet AZ 2
    Default: 10.0.4.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    MinLength: 9
    MaxLength: 18
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

  PrivateSubnet3Cidr:
    Type: String
    Description: Private Subnet AZ 3
    Default: 10.0.5.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

  VpcFlowLogs:
    Type: String
    Description: Enable VPC FlowLogs
    Default: false
    AllowedValues:
      - true
      - false

Conditions:
  EnableVpcFlowLogs: !Equals [ !Ref VpcFlowLogs, true ]

Resources:

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref 'VpcCidr'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${VpcName}'

  VpcFlowLogRole:
    Condition: EnableVpcFlowLogs
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${VpcName}-role-flow-logs'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource: "*"

  VpcFlowLogGroup:
    Condition: EnableVpcFlowLogs
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/${VpcName}/flowlogs'
      RetentionInDays: 1

  VpcFlowLog:
    Condition: EnableVpcFlowLogs
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt VpcFlowLogRole.Arn
      LogGroupName: !Ref VpcFlowLogGroup
      ResourceId: !Ref Vpc
      ResourceType: VPC
      TrafficType: ALL

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub '${VpcName}-igw'

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref 'InternetGateway'
      VpcId: !Ref 'Vpc'

  # Public Tier

  PublicEipSubnet1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: !Sub '${VpcName}-natgw-1'

  PublicEipSubnet2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: !Sub '${VpcName}-natgw-2'

  PublicEipSubnet3:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: !Sub '${VpcName}-natgw-3'

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref 'PublicSubnet1Cidr'
      VpcId: !Ref 'Vpc'
      Tags:
      - Key: Name
        Value: !Sub '${VpcName}-public-1'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref 'PublicSubnet2Cidr'
      VpcId: !Ref 'Vpc'
      Tags:
      - Key: Name
        Value: !Sub '${VpcName}-public-2'

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Ref 'PublicSubnet3Cidr'
      VpcId: !Ref 'Vpc'
      Tags:
      - Key: Name
        Value: !Sub '${VpcName}-public-3'

  PublicNatGatewaySubnet1:
    Type: AWS::EC2::NatGateway
    DependsOn: InternetGatewayAttachment
    Properties:
      AllocationId: !GetAtt PublicEipSubnet1.AllocationId
      SubnetId: !Ref 'PublicSubnet1'
      Tags:
      - Key: Name
        Value: !Sub '${VpcName}-1'

  PublicNatGatewaySubnet2:
    Type: AWS::EC2::NatGateway
    DependsOn: InternetGatewayAttachment
    Properties:
      AllocationId: !GetAtt PublicEipSubnet2.AllocationId
      SubnetId: !Ref 'PublicSubnet2'
      Tags:
      - Key: Name
        Value: !Sub '${VpcName}-2'

  PublicNatGatewaySubnet3:
    Type: AWS::EC2::NatGateway
    DependsOn: InternetGatewayAttachment
    Properties:
      AllocationId: !GetAtt PublicEipSubnet3.AllocationId
      SubnetId: !Ref 'PublicSubnet3'
      Tags:
      - Key: Name
        Value: !Sub '${VpcName}-3'

  PublicRouteTable1:
    Type: AWS::EC2::RouteTable
    DependsOn: InternetGatewayAttachment
    Properties:
      VpcId: !Ref 'Vpc'
      Tags:
      - Key: Name
        Value: !Sub '${VpcName}-public-1'

  PublicRouteTable2:
    Type: AWS::EC2::RouteTable
    DependsOn: InternetGatewayAttachment
    Properties:
      VpcId: !Ref 'Vpc'
      Tags:
      - Key: Name
        Value: !Sub '${VpcName}-public-2'

  PublicRouteTable3:
    Type: AWS::EC2::RouteTable
    DependsOn: InternetGatewayAttachment
    Properties:
      VpcId: !Ref 'Vpc'
      Tags:
      - Key: Name
        Value: !Sub '${VpcName}-public-3'

  PublicIgwRoute1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'InternetGateway'
      RouteTableId: !Ref 'PublicRouteTable1'

  PublicIgwRoute2:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'InternetGateway'
      RouteTableId: !Ref 'PublicRouteTable2'

  PublicIgwRoute3:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'InternetGateway'
      RouteTableId: !Ref 'PublicRouteTable3'

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'PublicRouteTable1'
      SubnetId: !Ref 'PublicSubnet1'

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'PublicRouteTable2'
      SubnetId: !Ref 'PublicSubnet2'

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'PublicRouteTable3'
      SubnetId: !Ref 'PublicSubnet3'

  # Private Tier

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
                    - 0
                    - !GetAZs ''
      CidrBlock: !Ref 'PrivateSubnet1Cidr'
      VpcId: !Ref 'Vpc'
      Tags:
      - Key: Name
        Value: !Sub '${VpcName}-private-1'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
                    - 1
                    - !GetAZs ''
      CidrBlock: !Ref 'PrivateSubnet2Cidr'
      VpcId: !Ref 'Vpc'
      Tags:
      - Key: Name
        Value: !Sub '${VpcName}-private-2'

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
                    - 2
                    - !GetAZs ''
      CidrBlock: !Ref 'PrivateSubnet3Cidr'
      VpcId: !Ref 'Vpc'
      Tags:
      - Key: Name
        Value: !Sub '${VpcName}-private-3'

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    DependsOn: InternetGatewayAttachment
    Properties:
      VpcId: !Ref 'Vpc'
      Tags:
      - Key: Name
        Value: !Sub '${VpcName}-private-1'

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    DependsOn: InternetGatewayAttachment
    Properties:
      VpcId: !Ref 'Vpc'
      Tags:
      - Key: Name
        Value: !Sub '${VpcName}-private-2'

  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    DependsOn: InternetGatewayAttachment
    Properties:
      VpcId: !Ref 'Vpc'
      Tags:
      - Key: Name
        Value: !Sub '${VpcName}-private-3'

  PrivateNatGwRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable1'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'PublicNatGatewaySubnet1'

  PrivateNatGwRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable2'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'PublicNatGatewaySubnet2'

  PrivateNatGwRoute3:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable3'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'PublicNatGatewaySubnet2'

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable1'
      SubnetId: !Ref 'PrivateSubnet1'

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable2'
      SubnetId: !Ref 'PrivateSubnet2'

  PrivateSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable3'
      SubnetId: !Ref 'PrivateSubnet3'

Outputs:

  VpcId:
    Description: VPC ID
    Value: !Ref 'Vpc'
    Export:
      Name: !Sub '${AWS::StackName}::vpc-id'

  PublicSubnet1:
    Description: Public Subnet 1 ID
    Value: !Ref 'PublicSubnet1'
    Export:
      Name: !Sub '${AWS::StackName}::public-subnet-id-1'

  PublicSubnet2:
    Description: Public Subnet 2 ID
    Value: !Ref 'PublicSubnet2'
    Export:
      Name: !Sub '${AWS::StackName}::public-subnet-id-2'

  PublicSubnet3:
    Description: Public Subnet 3 ID
    Value: !Ref 'PublicSubnet3'
    Export:
      Name: !Sub '${AWS::StackName}::public-subnet-id-3'

  PrivateSubnet1:
    Description: Tier 2 Subnet 1 ID
    Value: !Ref 'PrivateSubnet1'
    Export:
      Name: !Sub '${AWS::StackName}::private-subnet-id-1'

  PrivateSubnet2:
    Description: Tier 2 Subnet 2 ID
    Value: !Ref 'PrivateSubnet2'
    Export:
      Name: !Sub '${AWS::StackName}::private-subnet-id-2'

  PrivateSubnet3:
    Description: Tier 2 Subnet 3 ID
    Value: !Ref 'PrivateSubnet3'
    Export:
      Name: !Sub '${AWS::StackName}::private-subnet-id-3'
